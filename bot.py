import logging
from telegram import Update, InputFile
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters, ConversationHandler
)
from apscheduler.schedulers.background import BackgroundScheduler
import random
from datetime import time

logging.basicConfig(level=logging.INFO)

# ‚úÖ –¢–≤–æ–π —Ç–æ–∫–µ–Ω
TOKEN = "7837133555:AAFAQLfxm2SgBuWgedZP_M5fNCd00mvLQoU"

weight_log = {}

recipes = [
    "üç≥ –û–º–ª–µ—Ç —Å –æ–≤–æ—â–∞–º–∏ –∏ –∫—É—Ä–∏—Ü–µ–π ‚Äî –±–µ–ª–∫–∏, –∫–ª–µ—Ç—á–∞—Ç–∫–∞, —Å—ã—Ç–Ω–æ.",
    "ü•ó –°–∞–ª–∞—Ç —Å —Ç—É–Ω—Ü–æ–º, –∞–≤–æ–∫–∞–¥–æ –∏ –æ–ª–∏–≤–∫–æ–≤—ã–º –º–∞—Å–ª–æ–º.",
    "üç≤ –ì—Ä–µ—á–∫–∞ —Å –æ–≤–æ—â–∞–º–∏ –∏ –≥–æ–≤—è–¥–∏–Ω–æ–π ‚Äî –ø—Ä–æ—Å—Ç–æ–π —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É–∂–∏–Ω.",
    "üêü –ó–∞–ø–µ—á—ë–Ω–Ω—ã–π –ª–æ—Å–æ—Å—å + –±—Ä–æ–∫–∫–æ–ª–∏ –Ω–∞ –ø–∞—Ä—É + –ª–∏–º–æ–Ω.",
    "üåØ –õ–∞–≤–∞—à —Å —Ç–≤–æ—Ä–æ–≥–æ–º, –∑–µ–ª–µ–Ω—å—é –∏ –≤–∞—Ä—ë–Ω—ã–º —è–π—Ü–æ–º ‚Äî –±—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–∫—É—Å."
]

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ—Ö—É–¥–µ–Ω–∏—é.\n"
        "/plan ‚Äî PDF-–ø–ª–∞–Ω\n"
        "/recipe ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç\n"
        "/weight ‚Äî –∑–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—É—â–∏–π –≤–µ—Å\n"
        "/history ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–µ—Å–∞\n"
        "/help ‚Äî –ø–æ–º–æ—â—å"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥—ã:\n/plan\n/recipe\n/weight\n/history")

async def send_plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with open("plan_pokhudeniya_muzhchine.pdf", "rb") as f:
        await update.message.reply_document(InputFile(f), filename="plan_pokhudeniya.pdf")

async def send_recipe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(recipes))

# --- –í–µ—Å ---
WEIGHT_INPUT = range(1)

async def start_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–≤ –∫–≥):")
    return WEIGHT_INPUT

async def save_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    weight = update.message.text
    if user_id not in weight_log:
        weight_log[user_id] = []
    weight_log[user_id].append(weight)
    await update.message.reply_text(f"–í–µ—Å {weight} –∫–≥ –∑–∞–ø–∏—Å–∞–Ω!")
    return ConversationHandler.END

async def show_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    history = weight_log.get(user_id, [])
    if history:
        text = "\n".join([f"{i+1}) {w} –∫–≥" for i, w in enumerate(history)])
    else:
        text = "–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ."
    await update.message.reply_text(f"üìä –ò—Å—Ç–æ—Ä–∏—è –≤–µ—Å–∞:\n{text}")

# --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    for chat_id in context.application.chat_data.keys():
        await context.bot.send_message(chat_id=chat_id, text="üëü –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–µ –∑–∞–±—É–¥—å –ø—Ä–æ –¥–≤–∏–∂–µ–Ω–∏–µ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è!")

def schedule_reminders(application):
    scheduler = BackgroundScheduler(timezone="Europe/Moscow")
    scheduler.add_job(lambda: application.create_task(send_reminder(application)), trigger='cron', hour=10, minute=0)
    scheduler.start()

# --- –ó–∞–ø—É—Å–∫ ---
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("plan", send_plan))
    app.add_handler(CommandHandler("recipe", send_recipe))
    app.add_handler(CommandHandler("history", show_history))

    weight_conv = ConversationHandler(
        entry_points=[CommandHandler("weight", start_weight)],
        states={WEIGHT_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_weight)]},
        fallbacks=[]
    )
    app.add_handler(weight_conv)

    schedule_reminders(app)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

if __name__ == "__main__":
    main()
